<!-- This is a demo to use the ar_pose node with a usb_camera connected to -->

<launch>
  <node pkg="rviz" type="rviz" name="rviz" 
    args="-d $(find sainsmart_robot)/config/demo_ar_pose.rviz"/>
  <node pkg="tf" type="static_transform_publisher" name="world_to_cam" 
    args="0 0 0.8 0 0 3.14 world head_camera 10" />
  <node ns="camera" pkg="image_proc" type="image_proc" name="image_proc"/>
 <node ns="camera" pkg="usb_cam" type="usb_cam_node" name="usb_camera_node"
    output="screen"> 
    <remap from="usb_camera_node/image_raw" to="/camera/image_raw"/>
    <param name="video_device" type="string" value="/dev/video1" />
    <param name="camera_info_url" type="string"
      value="file://$(find sainsmart_robot)/camera_calibration.yaml" />
  </node>  
  <node name="ar_pose" pkg="ar_pose" type="ar_single" respawn="false"
    output="screen">
    <param name="marker_pattern" type="string"
      value="$(find ar_pose)/data/4x4/4x4_1.patt"/>
    <param name="marker_width" type="double" value="61.0"/>
    <param name="marker_center_x" type="double" value="0.0"/>
    <param name="marker_center_y" type="double" value="0.0"/>
    <param name="threshold" type="int" value="100"/>
    <param name="use_history" type="bool" value="true"/>
  </node> 
  
   <node pkg="sainsmart_robot" name="cam_transformation_listener" type="camera_transformation_listener.py"/>
   <node pkg="sainsmart_robot" name="inv_kinematic" type="inverse_kin.py"/> 
   <node pkg="sainsmart_robot" name="rosserial_python" type="serial_node.py" args="/dev/ttyACM0" output="screen"/>
   
</launch>
